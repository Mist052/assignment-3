#BlueJ class context
comment0.target=Field
comment0.text=\r\n\ Represent\ a\ rectangular\ grid\ of\ field\ positions.\r\n\ Each\ position\ is\ able\ to\ store\ a\ single\ animal/object.\r\n\ \r\n\ @author\ David\ J.\ Barnes\ and\ Michael\ K\u00F6lling\r\n\ @version\ 7.0\r\n
comment1.params=depth\ width
comment1.target=Field(int,\ int)
comment1.text=\r\n\ Represent\ a\ field\ of\ the\ given\ dimensions.\r\n\ @param\ depth\ The\ depth\ of\ the\ field.\r\n\ @param\ width\ The\ width\ of\ the\ field.\r\n
comment10.params=
comment10.target=void\ clear()
comment10.text=\r\n\ Empty\ the\ field.\r\n
comment11.params=
comment11.target=boolean\ isViable()
comment11.text=\r\n\ Return\ whether\ there\ is\ at\ least\ one\ squirrel,\ one\ wolf,\ one\ bear,\ one\ fishal\ and\ one\ seal\ in\ the\ field.\r\n\ @return\ true\ if\ there\ is\ at\ least\ one\ squirrel,\ one\ wolf,\ one\ bear,\ one\ fishal\ and\ one\ seal\ in\ the\ field.\r\n
comment12.params=
comment12.target=java.util.List\ getAnimals()
comment12.text=\r\n\ Get\ the\ list\ of\ animals.\r\n
comment13.params=
comment13.target=int\ getDepth()
comment13.text=\r\n\ Return\ the\ depth\ of\ the\ field.\r\n\ @return\ The\ depth\ of\ the\ field.\r\n
comment14.params=
comment14.target=int\ getWidth()
comment14.text=\r\n\ Return\ the\ width\ of\ the\ field.\r\n\ @return\ The\ width\ of\ the\ field.\r\n
comment2.params=anAnimal\ location
comment2.target=void\ placeAnimal(Animal,\ Location)
comment2.text=\r\n\ Place\ an\ animal\ at\ the\ given\ location.\r\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\r\n\ be\ lost.\r\n\ @param\ the\ animal\ to\ be\ placed.\r\n\ @param\ location\ Where\ to\ place\ the\ animal.\r\n
comment3.params=aPlant\ location
comment3.target=void\ placePlant(Plant,\ Location)
comment3.text=\r\n\ Place\ a\ plant\ at\ the\ given\ location.\r\n\ If\ there\ is\ already\ a\ plant\ at\ the\ location\ it\ will\r\n\ be\ lost.\r\n\ @param\ the\ plant\ to\ be\ placed.\r\n\ @param\ location\ Where\ to\ place\ the\ plant.\r\n
comment4.params=location
comment4.target=java.lang.Object\ getObjectAt(Location)
comment4.text=\r\n\ Return\ the\ object\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ location\ Where\ in\ the\ field.\r\n\ @return\ The\ object\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment5.params=
comment5.target=java.util.List\ getPlants()
comment5.text=\r\n\ Get\ a\ list\ of\ all\ plants\ in\ the\ field.\r\n\ @return\ A\ list\ of\ all\ plants.\r\n
comment6.params=location
comment6.target=Animal\ getAnimalAt(Location)
comment6.text=\r\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ location\ Where\ in\ the\ field.\r\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment7.params=location
comment7.target=java.util.List\ getFreeAdjacentLocations(Location)
comment7.text=\r\n\ Get\ a\ shuffled\ list\ of\ the\ free\ adjacent\ locations.\r\n\ @param\ location\ Get\ locations\ adjacent\ to\ this.\r\n\ @return\ A\ list\ of\ free\ adjacent\ locations.\r\n
comment8.params=location
comment8.target=java.util.List\ getAdjacentLocations(Location)
comment8.text=\r\n\ Return\ a\ shuffled\ list\ of\ locations\ adjacent\ to\ the\ given\ one.\r\n\ The\ list\ will\ not\ include\ the\ location\ itself.\r\n\ All\ locations\ will\ lie\ within\ the\ grid.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\r\n\ @return\ A\ list\ of\ locations\ adjacent\ to\ that\ given.\r\n
comment9.params=
comment9.target=void\ fieldStats()
comment9.text=\r\n\ Print\ out\ the\ number\ of\ each\ type\ of\ animal\ in\ the\ field.\r\n
numComments=15
